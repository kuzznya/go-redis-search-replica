#ifndef GO_RM_VARARGS_H
#define GO_RM_VARARGS_H

#include <errno.h>
#include <stdlib.h>
#include <stdint.h>
#include "./redismodule.h"
#include "./wrapper.h"

/**
 * This header file contains varargs call dispatcher's.
 * Go don't support call C's varargs method,to generate a lot methods
 * to simulate the varargs effect.
 *
 * cmd/cgo: cannot call functions with variable-argument lists.
 * https://github.com/golang/go/issues/975
 */

// Generated by gen.es6
// region Generated
RedisModuleCallReply * CallVar(RedisModuleCtx *key, const char *cmdname, const char *fmt, const int argc,const intptr_t argv[]){
    switch(argc){
case 0: return RedisModule_Call(key, cmdname, fmt);
case 1: return RedisModule_Call(key, cmdname, fmt,argv[0]);
case 2: return RedisModule_Call(key, cmdname, fmt,argv[0],argv[1]);
case 3: return RedisModule_Call(key, cmdname, fmt,argv[0],argv[1],argv[2]);
case 4: return RedisModule_Call(key, cmdname, fmt,argv[0],argv[1],argv[2],argv[3]);
case 5: return RedisModule_Call(key, cmdname, fmt,argv[0],argv[1],argv[2],argv[3],argv[4]);
case 6: return RedisModule_Call(key, cmdname, fmt,argv[0],argv[1],argv[2],argv[3],argv[4],argv[5]);
case 7: return RedisModule_Call(key, cmdname, fmt,argv[0],argv[1],argv[2],argv[3],argv[4],argv[5],argv[6]);
case 8: return RedisModule_Call(key, cmdname, fmt,argv[0],argv[1],argv[2],argv[3],argv[4],argv[5],argv[6],argv[7]);
case 9: return RedisModule_Call(key, cmdname, fmt,argv[0],argv[1],argv[2],argv[3],argv[4],argv[5],argv[6],argv[7],argv[8]);
case 10: return RedisModule_Call(key, cmdname, fmt,argv[0],argv[1],argv[2],argv[3],argv[4],argv[5],argv[6],argv[7],argv[8],argv[9]);
case 11: return RedisModule_Call(key, cmdname, fmt,argv[0],argv[1],argv[2],argv[3],argv[4],argv[5],argv[6],argv[7],argv[8],argv[9],argv[10]);
case 12: return RedisModule_Call(key, cmdname, fmt,argv[0],argv[1],argv[2],argv[3],argv[4],argv[5],argv[6],argv[7],argv[8],argv[9],argv[10],argv[11]);
case 13: return RedisModule_Call(key, cmdname, fmt,argv[0],argv[1],argv[2],argv[3],argv[4],argv[5],argv[6],argv[7],argv[8],argv[9],argv[10],argv[11],argv[12]);
case 14: return RedisModule_Call(key, cmdname, fmt,argv[0],argv[1],argv[2],argv[3],argv[4],argv[5],argv[6],argv[7],argv[8],argv[9],argv[10],argv[11],argv[12],argv[13]);
case 15: return RedisModule_Call(key, cmdname, fmt,argv[0],argv[1],argv[2],argv[3],argv[4],argv[5],argv[6],argv[7],argv[8],argv[9],argv[10],argv[11],argv[12],argv[13],argv[14]);
case 16: return RedisModule_Call(key, cmdname, fmt,argv[0],argv[1],argv[2],argv[3],argv[4],argv[5],argv[6],argv[7],argv[8],argv[9],argv[10],argv[11],argv[12],argv[13],argv[14],argv[15]);
case 17: return RedisModule_Call(key, cmdname, fmt,argv[0],argv[1],argv[2],argv[3],argv[4],argv[5],argv[6],argv[7],argv[8],argv[9],argv[10],argv[11],argv[12],argv[13],argv[14],argv[15],argv[16]);
case 18: return RedisModule_Call(key, cmdname, fmt,argv[0],argv[1],argv[2],argv[3],argv[4],argv[5],argv[6],argv[7],argv[8],argv[9],argv[10],argv[11],argv[12],argv[13],argv[14],argv[15],argv[16],argv[17]);
case 19: return RedisModule_Call(key, cmdname, fmt,argv[0],argv[1],argv[2],argv[3],argv[4],argv[5],argv[6],argv[7],argv[8],argv[9],argv[10],argv[11],argv[12],argv[13],argv[14],argv[15],argv[16],argv[17],argv[18]);
case 20: return RedisModule_Call(key, cmdname, fmt,argv[0],argv[1],argv[2],argv[3],argv[4],argv[5],argv[6],argv[7],argv[8],argv[9],argv[10],argv[11],argv[12],argv[13],argv[14],argv[15],argv[16],argv[17],argv[18],argv[19]);

    default:
        errno=EINVAL;
        return NULL;
    }
}
/* Hash */

int HashSetVar(RedisModuleKey *key, int flags,int argc, intptr_t argv[]){
    switch(argc){
case 0: return RedisModule_HashSet(key, flags);
case 1: return RedisModule_HashSet(key, flags,argv[0]);
case 2: return RedisModule_HashSet(key, flags,argv[0],argv[1]);
case 3: return RedisModule_HashSet(key, flags,argv[0],argv[1],argv[2]);
case 4: return RedisModule_HashSet(key, flags,argv[0],argv[1],argv[2],argv[3]);
case 5: return RedisModule_HashSet(key, flags,argv[0],argv[1],argv[2],argv[3],argv[4]);
case 6: return RedisModule_HashSet(key, flags,argv[0],argv[1],argv[2],argv[3],argv[4],argv[5]);
case 7: return RedisModule_HashSet(key, flags,argv[0],argv[1],argv[2],argv[3],argv[4],argv[5],argv[6]);
case 8: return RedisModule_HashSet(key, flags,argv[0],argv[1],argv[2],argv[3],argv[4],argv[5],argv[6],argv[7]);
case 9: return RedisModule_HashSet(key, flags,argv[0],argv[1],argv[2],argv[3],argv[4],argv[5],argv[6],argv[7],argv[8]);
case 10: return RedisModule_HashSet(key, flags,argv[0],argv[1],argv[2],argv[3],argv[4],argv[5],argv[6],argv[7],argv[8],argv[9]);
case 11: return RedisModule_HashSet(key, flags,argv[0],argv[1],argv[2],argv[3],argv[4],argv[5],argv[6],argv[7],argv[8],argv[9],argv[10]);
case 12: return RedisModule_HashSet(key, flags,argv[0],argv[1],argv[2],argv[3],argv[4],argv[5],argv[6],argv[7],argv[8],argv[9],argv[10],argv[11]);
case 13: return RedisModule_HashSet(key, flags,argv[0],argv[1],argv[2],argv[3],argv[4],argv[5],argv[6],argv[7],argv[8],argv[9],argv[10],argv[11],argv[12]);
case 14: return RedisModule_HashSet(key, flags,argv[0],argv[1],argv[2],argv[3],argv[4],argv[5],argv[6],argv[7],argv[8],argv[9],argv[10],argv[11],argv[12],argv[13]);
case 15: return RedisModule_HashSet(key, flags,argv[0],argv[1],argv[2],argv[3],argv[4],argv[5],argv[6],argv[7],argv[8],argv[9],argv[10],argv[11],argv[12],argv[13],argv[14]);
case 16: return RedisModule_HashSet(key, flags,argv[0],argv[1],argv[2],argv[3],argv[4],argv[5],argv[6],argv[7],argv[8],argv[9],argv[10],argv[11],argv[12],argv[13],argv[14],argv[15]);
case 17: return RedisModule_HashSet(key, flags,argv[0],argv[1],argv[2],argv[3],argv[4],argv[5],argv[6],argv[7],argv[8],argv[9],argv[10],argv[11],argv[12],argv[13],argv[14],argv[15],argv[16]);
case 18: return RedisModule_HashSet(key, flags,argv[0],argv[1],argv[2],argv[3],argv[4],argv[5],argv[6],argv[7],argv[8],argv[9],argv[10],argv[11],argv[12],argv[13],argv[14],argv[15],argv[16],argv[17]);
case 19: return RedisModule_HashSet(key, flags,argv[0],argv[1],argv[2],argv[3],argv[4],argv[5],argv[6],argv[7],argv[8],argv[9],argv[10],argv[11],argv[12],argv[13],argv[14],argv[15],argv[16],argv[17],argv[18]);
case 20: return RedisModule_HashSet(key, flags,argv[0],argv[1],argv[2],argv[3],argv[4],argv[5],argv[6],argv[7],argv[8],argv[9],argv[10],argv[11],argv[12],argv[13],argv[14],argv[15],argv[16],argv[17],argv[18],argv[19]);

    default:
        return REDISMODULE_ERR;
    }
}

int HashGetVar(RedisModuleKey *key, int flags,int argc, intptr_t argv[]){
    switch(argc){
case 0: return RedisModule_HashGet(key, flags);
case 1: return RedisModule_HashGet(key, flags,argv[0]);
case 2: return RedisModule_HashGet(key, flags,argv[0],argv[1]);
case 3: return RedisModule_HashGet(key, flags,argv[0],argv[1],argv[2]);
case 4: return RedisModule_HashGet(key, flags,argv[0],argv[1],argv[2],argv[3]);
case 5: return RedisModule_HashGet(key, flags,argv[0],argv[1],argv[2],argv[3],argv[4]);
case 6: return RedisModule_HashGet(key, flags,argv[0],argv[1],argv[2],argv[3],argv[4],argv[5]);
case 7: return RedisModule_HashGet(key, flags,argv[0],argv[1],argv[2],argv[3],argv[4],argv[5],argv[6]);
case 8: return RedisModule_HashGet(key, flags,argv[0],argv[1],argv[2],argv[3],argv[4],argv[5],argv[6],argv[7]);
case 9: return RedisModule_HashGet(key, flags,argv[0],argv[1],argv[2],argv[3],argv[4],argv[5],argv[6],argv[7],argv[8]);
case 10: return RedisModule_HashGet(key, flags,argv[0],argv[1],argv[2],argv[3],argv[4],argv[5],argv[6],argv[7],argv[8],argv[9]);
case 11: return RedisModule_HashGet(key, flags,argv[0],argv[1],argv[2],argv[3],argv[4],argv[5],argv[6],argv[7],argv[8],argv[9],argv[10]);
case 12: return RedisModule_HashGet(key, flags,argv[0],argv[1],argv[2],argv[3],argv[4],argv[5],argv[6],argv[7],argv[8],argv[9],argv[10],argv[11]);
case 13: return RedisModule_HashGet(key, flags,argv[0],argv[1],argv[2],argv[3],argv[4],argv[5],argv[6],argv[7],argv[8],argv[9],argv[10],argv[11],argv[12]);
case 14: return RedisModule_HashGet(key, flags,argv[0],argv[1],argv[2],argv[3],argv[4],argv[5],argv[6],argv[7],argv[8],argv[9],argv[10],argv[11],argv[12],argv[13]);
case 15: return RedisModule_HashGet(key, flags,argv[0],argv[1],argv[2],argv[3],argv[4],argv[5],argv[6],argv[7],argv[8],argv[9],argv[10],argv[11],argv[12],argv[13],argv[14]);
case 16: return RedisModule_HashGet(key, flags,argv[0],argv[1],argv[2],argv[3],argv[4],argv[5],argv[6],argv[7],argv[8],argv[9],argv[10],argv[11],argv[12],argv[13],argv[14],argv[15]);
case 17: return RedisModule_HashGet(key, flags,argv[0],argv[1],argv[2],argv[3],argv[4],argv[5],argv[6],argv[7],argv[8],argv[9],argv[10],argv[11],argv[12],argv[13],argv[14],argv[15],argv[16]);
case 18: return RedisModule_HashGet(key, flags,argv[0],argv[1],argv[2],argv[3],argv[4],argv[5],argv[6],argv[7],argv[8],argv[9],argv[10],argv[11],argv[12],argv[13],argv[14],argv[15],argv[16],argv[17]);
case 19: return RedisModule_HashGet(key, flags,argv[0],argv[1],argv[2],argv[3],argv[4],argv[5],argv[6],argv[7],argv[8],argv[9],argv[10],argv[11],argv[12],argv[13],argv[14],argv[15],argv[16],argv[17],argv[18]);
case 20: return RedisModule_HashGet(key, flags,argv[0],argv[1],argv[2],argv[3],argv[4],argv[5],argv[6],argv[7],argv[8],argv[9],argv[10],argv[11],argv[12],argv[13],argv[14],argv[15],argv[16],argv[17],argv[18],argv[19]);

    default:
        return REDISMODULE_ERR;
    }
}
// endregion
#endif
